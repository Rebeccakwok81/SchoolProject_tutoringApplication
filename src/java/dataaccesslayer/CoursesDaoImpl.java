package dataaccesslayer;


import java.util.List;

import transferobjects.Course;

import java.util.ArrayList;
import java.sql.PreparedStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import transferobjects.CredentialsDTO;

public class CoursesDaoImpl implements CoursesDao{
    private CredentialsDTO creds;

    public CoursesDaoImpl(CredentialsDTO creds) {
        this.creds = creds;
    }
    
	@Override
	public List<Course> getAllCourses() {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		ArrayList<Course> courses = null;
		try{
			DataSource ds = new DataSource(creds);
			con = ds.createConnection();
			pstmt = con.prepareStatement(
					"SELECT courseCode, CourseName, CourseDescription FROM course");
			rs = pstmt.executeQuery();
			courses = new ArrayList<Course>();
			while(rs.next()){
				Course course = new Course();
				course.setCourseCode(rs.getString("CourseCode"));
				course.setCourseName(rs.getString("CourseName"));
				course.setCourseDescription(rs.getString("CourseDescription"));
				courses.add(course);
			}
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		finally{
			try{ if(rs != null){ rs.close(); } }
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(pstmt != null){ pstmt.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
		return courses;
	}

	@Override
	public Course getAuthorByAuthorId(Integer authorID) {
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		AuthorDTO author = null;
		try{
			DataSource ds = new DataSource(creds);
			con = ds.createConnection();
			pstmt = con.prepareStatement(
			"SELECT \"authorID\", \"firstName\", \"lastName\" FROM \"authors\" WHERE \"authorID\" = ?");
			pstmt.setInt(1, authorID.intValue());
			rs = pstmt.executeQuery();
			while(rs.next()){
				author = new AuthorDTO();
				author.setAuthorID(new Integer(rs.getInt("authorID")));
				author.setFirstName(rs.getString("firstName"));
				author.setLastName(rs.getString("lastName"));
			}
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		finally{
			try{ if(rs != null){ rs.close(); } }
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(pstmt != null){ pstmt.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
		return author;
	}

	@Override
	public void addAuthor(AuthorDTO author) {
		Connection con = null;
		PreparedStatement pstmt = null;
		try{
			DataSource ds = new DataSource(creds);
			con = ds.createConnection();
			// do not insert AuthorID, it is generated by Database
			pstmt = con.prepareStatement(
					"INSERT INTO \"authors\" (\"firstName\", \"lastName\") " +
			        "VALUES(?, ?)");
			pstmt.setString(1, author.getFirstName());
			pstmt.setString(2, author.getLastName());
			pstmt.executeUpdate();
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		finally{
			try{ if(pstmt != null){ pstmt.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
	}

	@Override
	public void updateAuthor(AuthorDTO author) {
			Connection con = null;
			PreparedStatement pstmt = null;
			try{
				DataSource ds = new DataSource(creds);
				con = ds.createConnection();
				pstmt = con.prepareStatement(
						"UPDATE \"authors\" SET \"firstName\" = ?, " + 
				        "\"lastName\" = ? WHERE \"authorID\" = ?");
				pstmt.setString(1, author.getFirstName());
				pstmt.setString(2, author.getLastName());	
				pstmt.setInt(3, author.getAuthorID().intValue());
				pstmt.executeUpdate();
			}
			catch(SQLException e){
				e.printStackTrace();
			}
			finally{
				try{ if(pstmt != null){ pstmt.close(); }}
				catch(SQLException ex){System.out.println(ex.getMessage());}
				try{ if(con != null){ con.close(); }}
				catch(SQLException ex){System.out.println(ex.getMessage());}
			}
	}

	@Override
	public void deleteAuthor(AuthorDTO author) {
		Connection con = null;
		PreparedStatement pstmt = null;
		try{
			DataSource ds = new DataSource(creds);
			con = ds.createConnection();
			pstmt = con.prepareStatement(
					"DELETE FROM \"authors\" WHERE \"authorID\" = ?");	
			pstmt.setInt(1, author.getAuthorID().intValue());
			pstmt.executeUpdate();
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		finally{
			try{ if(pstmt != null){ pstmt.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
			try{ if(con != null){ con.close(); }}
			catch(SQLException ex){System.out.println(ex.getMessage());}
		}
	}
}

